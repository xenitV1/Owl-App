name: Daily Copyright Check

on:
  schedule:
    # Every day at 2 AM UTC (5 AM Turkey time)
    - cron: '0 2 * * *'
  workflow_dispatch: # Manual trigger
  push:
    branches: [ main ]
    paths:
      - 'scripts/check-copyright.js'
      - '.github/workflows/copyright-check.yml'

permissions:
  contents: read
  issues: write # To create issues if violations found

jobs:
  copyright-check:
    name: Check for Copyright Violations
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Create security-reports directory
        run: mkdir -p security-reports
      
      - name: Run copyright check
        id: copyright_check
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run copyright:check
      
      - name: Upload copyright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: copyright-report-${{ github.run_number }}
          path: security-reports/copyright-report-*.json
          retention-days: 90
      
      - name: Create Issue if violations found
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const files = fs.readdirSync('security-reports')
              .filter(f => f.startsWith('copyright-report-'))
              .sort()
              .reverse();
            
            if (files.length === 0) {
              console.log('No report file found');
              return;
            }
            
            const report = JSON.parse(
              fs.readFileSync(`security-reports/${files[0]}`, 'utf8')
            );
            
            if (report.totalViolations === 0) return;
            
            const criticalViolations = report.violations.filter(
              v => v.confidence === 'HIGH'
            );
            
            let body = `## 🚨 Copyright Violation Alert\n\n`;
            body += `**Date:** ${new Date(report.timestamp).toLocaleString()}\n`;
            body += `**Total Violations:** ${report.totalViolations}\n`;
            body += `**Critical (HIGH):** ${criticalViolations.length}\n`;
            body += `**Unique Repositories:** ${report.summary.uniqueRepositories}\n\n`;
            
            if (criticalViolations.length > 0) {
              body += `### 🔴 Critical Violations (HIGH Confidence)\n\n`;
              criticalViolations.slice(0, 5).forEach((v, i) => {
                body += `${i + 1}. **${v.repository}** (⭐ ${v.stars})\n`;
                body += `   - Search Term: \`${v.searchTerm}\`\n`;
                body += `   - File: \`${v.path}\`\n`;
                body += `   - [View Code](${v.url})\n\n`;
              });
            }
            
            body += `\n### 📋 Actions Required\n\n`;
            body += `1. Review the violations above\n`;
            body += `2. Check if they include your LICENSE file\n`;
            body += `3. Check if they provide attribution\n`;
            body += `4. If license violation confirmed:\n`;
            body += `   - Contact repository owner\n`;
            body += `   - File DMCA takedown if necessary\n\n`;
            body += `[Download Full Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n`;
            
            // Check if issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'copyright-violation'
            });
            
            if (issues.data.length > 0) {
              // Update existing issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues.data[0].number,
                body: `## New Violation Report\n\n${body}`
              });
            } else {
              // Create new issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `🚨 Copyright Violations Detected - ${new Date().toISOString().split('T')[0]}`,
                body: body,
                labels: ['copyright-violation', 'security', 'urgent']
              });
            }
      
      - name: Summary
        if: always()
        run: |
          if [ "${{ steps.copyright_check.outcome }}" == "success" ]; then
            echo "✅ No copyright violations detected!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🛡️ Your code appears to be safe." >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Potential copyright violations detected!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "📄 Check the artifacts for detailed report." >> $GITHUB_STEP_SUMMARY
            echo "🔔 An issue has been created for review." >> $GITHUB_STEP_SUMMARY
          fi

