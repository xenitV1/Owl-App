model User {
  id                 String               @id @default(cuid())
  email              String               @unique
  name               String?
  username           String?              @unique  // ✨ YENİ: Benzersiz kullanıcı adı
  avatar             String?
  role               UserRole             @default(STUDENT)
  country            String?
  language           String?              @default("en")
  preferLocalContent Boolean              @default(true)
  school             String?
  grade              String?
  favoriteSubject    String?
  bio                String?
  isVerified         Boolean              @default(false)
  totalInteractions  Int                  @default(0)
  onboardingComplete Boolean              @default(false)
  
  // Country and grade change tracking
  countryChangeCount Int                  @default(0)
  lastCountryChange  DateTime?
  lastGradeChange    DateTime?
  pendingGrade       String?
  pendingGradeDate   DateTime?
  
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  adminActivityLogs  AdminActivityLog[]
  reviewedAppeals    Appeal[]             @relation("AppealReviewer")
  appeals            Appeal[]
  comments           Comment[]
  communityMembers   CommunityMember[]
  followers          Follow[]             @relation("UserFollowers")
  following          Follow[]             @relation("UserFollowing")
  groupMembers       GroupMember[]
  likes              Like[]
  moderationActions  ModerationAction[]
  actorNotifications Notification[]       @relation("NotificationActor")
  notifications      Notification[]
  poolCategories     PoolCategory[]
  pools              Pool[]
  posts              Post[]
  assignedReports    Report[]             @relation("ModeratorAssignments")
  reports            Report[]
  blockedBy          UserBlock[]          @relation("UserBlocked")
  blockedUsers       UserBlock[]          @relation("UserBlocking")
  mutedBy            UserMute[]           @relation("UserMuted")
  mutedUsers         UserMute[]           @relation("UserMuting")
  echoes             Echo[]
  createdCommunities Community[]          @relation("CommunityCreator")
  createdChatRooms   ChatRoom[]           @relation("ChatRoomCreator")
  chatRoomMembers    ChatRoomMember[]
  chatMessages       ChatMessage[]

  @@map("users")
}

model Post {
  id                  String         @id @default(cuid())
  title               String
  content             String?
  image               String?
  subject             String?
  grade               String?
  isPublic            Boolean        @default(true)
  authorId            String
  communityId         String?
  groupId             String?
  
  // Country and language fields for content distribution
  authorCountry       String?
  language            String?        @default("en")
  
  // AI-generated content fields
  aiGenerated         Boolean        @default(false)
  aiContentType       String?        // 'flashcards', 'questions', 'notes'
  aiGeneratedContent  String?        // JSON string
  aiSourceDocument    String?        // Original document name
  aiAgeGroup          String?        // Target age group
  aiPromptUsed        String?        // For tracking/debugging

  // Algorithm fields
  upvotes             Int            @default(0)
  downvotes           Int            @default(0)
  sharesCount         Int            @default(0)
  reportCount         Int            @default(0)

  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  comments            Comment[]
  likes               Like[]
  notifications       Notification[]
  pools               Pool[]
  echoes              Echo[]
  group               PrivateGroup?  @relation(fields: [groupId], references: [id])
  community           Community?     @relation(fields: [communityId], references: [id])
  author              User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  reports             Report[]

  @@index([createdAt])
  @@index([grade, createdAt])
  @@map("posts")
}

model PostImage {
  id            String   @id @default(cuid())
  postId        String   @unique
  originalName  String
  mimeType      String
  size          Int
  optimizedData Bytes
  smallData     Bytes?
  mediumData    Bytes?
  largeData     Bytes?
  width         Int
  height        Int
  placeholder   String?
  responsive    Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("post_images")
}

model Community {
  id                  String            @id @default(cuid())
  name                String            @unique
  nameKey             String?
  description         String?
  avatar              String?
  isPublic            Boolean           @default(true)
  
  // System community flags
  isSystemGenerated   Boolean           @default(false)
  country             String?
  grade               String?
  
  // User community settings
  creatorId           String?
  allowedContentTypes String?
  
  // ✨ YENİ: Chat settings
  chatEnabled         Boolean           @default(true)   // Chat özelliği aktif mi?
  chatPublicAccess    Boolean           @default(false)  // Topluluk dışı erişim
  chatMaxMembers      Int               @default(300)    // Kanal başına max üye
  
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  members             CommunityMember[]
  posts               Post[]
  chatRooms           ChatRoom[]
  creator             User?             @relation("CommunityCreator", fields: [creatorId], references: [id])
  
  @@index([isSystemGenerated, country, grade])
  @@map("communities")
}

model PrivateGroup {
  id          String        @id @default(cuid())
  name        String
  description String?
  avatar      String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  members     GroupMember[]
  posts       Post[]

  @@map("private_groups")
}

model CommunityMember {
  id          String    @id @default(cuid())
  userId      String
  communityId String
  role        String    @default("member")
  joinedAt    DateTime  @default(now())
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, communityId])
  @@map("community_members")
}

model GroupMember {
  id       String       @id @default(cuid())
  userId   String
  groupId  String
  role     String       @default("member")
  joinedAt DateTime     @default(now())
  group    PrivateGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user     User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@map("group_members")
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  following   User     @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  reports   Report[]

  @@map("comments")
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("likes")
}

model Echo {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  comment   String?
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId, createdAt])
  @@index([postId])
  @@map("echoes")
}

model Pool {
  id         String        @id @default(cuid())
  userId     String
  postId     String
  categoryId String?
  createdAt  DateTime      @default(now())
  category   PoolCategory? @relation(fields: [categoryId], references: [id])
  post       Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("pools")
}

model PoolCategory {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String   @default("#3B82F6")
  icon        String   @default("Bookmark")
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  pools       Pool[]

  @@unique([userId, name])
  @@map("pool_categories")
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  userId    String
  actorId   String?
  postId    String?
  createdAt DateTime         @default(now())
  post      Post?            @relation(fields: [postId], references: [id])
  actor     User?            @relation("NotificationActor", fields: [actorId], references: [id])
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Report {
  id                String             @id @default(cuid())
  type              ReportType
  reason            String
  description       String?
  status            ReportStatus       @default(PENDING)
  priority          ReportPriority     @default(MEDIUM)
  evidence          String?
  reporterId        String
  targetId          String
  targetType        String
  postId            String?
  commentId         String?
  assignedTo        String?
  resolvedAt        DateTime?
  resolution        String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  appeals           Appeal[]
  moderationActions ModerationAction[]
  assignedToUser    User?              @relation("ModeratorAssignments", fields: [assignedTo], references: [id])
  comment           Comment?           @relation(fields: [commentId], references: [id])
  post              Post?              @relation(fields: [postId], references: [id])
  reporter          User               @relation(fields: [reporterId], references: [id], onDelete: Cascade)

  @@map("reports")
}

model UserBlock {
  id        String   @id @default(cuid())
  blockerId String
  blockedId String
  reason    String?
  createdAt DateTime @default(now())
  blocked   User     @relation("UserBlocked", fields: [blockedId], references: [id], onDelete: Cascade)
  blocker   User     @relation("UserBlocking", fields: [blockerId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
  @@map("user_blocks")
}

model UserMute {
  id        String    @id @default(cuid())
  muterId   String
  mutedId   String
  reason    String?
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  muted     User      @relation("UserMuted", fields: [mutedId], references: [id], onDelete: Cascade)
  muter     User      @relation("UserMuting", fields: [muterId], references: [id], onDelete: Cascade)

  @@unique([muterId, mutedId])
  @@map("user_mutes")
}

model Waitlist {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  school    String?
  interests String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("waitlist")
}

model ModerationAction {
  id          String               @id @default(cuid())
  type        ModerationActionType
  targetId    String
  targetType  String
  reason      String
  moderatorId String
  reportId    String?
  duration    String?
  expiresAt   DateTime?
  createdAt   DateTime             @default(now())
  report      Report?              @relation(fields: [reportId], references: [id])
  moderator   User                 @relation(fields: [moderatorId], references: [id], onDelete: Cascade)

  @@map("moderation_actions")
}

model Appeal {
  id          String       @id @default(cuid())
  reportId    String
  userId      String
  reason      String
  description String
  status      AppealStatus @default(PENDING)
  reviewedBy  String?
  decision    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  reviewer    User?        @relation("AppealReviewer", fields: [reviewedBy], references: [id])
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  report      Report       @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@map("appeals")
}

model ContentFilter {
  id          String       @id @default(cuid())
  type        FilterType
  pattern     String
  action      FilterAction
  isActive    Boolean      @default(true)
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("content_filters")
}

model AdminActivityLog {
  id         String   @id @default(cuid())
  action     String
  targetType String
  targetId   String
  adminId    String
  details    String
  createdAt  DateTime @default(now())
  admin      User     @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@map("admin_activity_logs")
}

enum UserRole {
  GUEST
  STUDENT
  TEACHER
  ACADEMICIAN
  ADMIN
}

enum ReportType {
  INAPPROPRIATE_CONTENT
  SPAM
  HARASSMENT
  BULLYING
  COPYRIGHT
  HATE_SPEECH
  THREATS
  PERSONAL_INFO
  IMPERSONATION
  SCAM
  OTHER
}

enum ReportPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ReportStatus {
  PENDING
  REVIEWING
  RESOLVED
  DISMISSED
  ESCALATED
}

enum ModerationActionType {
  WARNING
  CONTENT_REMOVAL
  ACCOUNT_SUSPENSION
  ACCOUNT_BAN
  COMMENT_REMOVAL
  POST_REMOVAL
  TEMPORARY_SUSPENSION
}

enum AppealStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
}

enum FilterType {
  KEYWORD
  PATTERN
  URL
  EMAIL
  PHONE
}

enum FilterAction {
  FLAG
  BLOCK
  REMOVE
  ESCALATE
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
  POST
  ECHO
  SYSTEM
  CHAT_MESSAGE  // ✨ YENİ: Chat mesaj bildirimi
}

model SystemConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String   // JSON
  updatedAt DateTime @default(now())

  @@map("system_config")
}

model UserInterestVector {
  id             String   @id @default(cuid())
  userId         String   @unique
  subjects       String   // JSON array of subjects
  grades         String   // JSON array of grades
  lastUpdated    DateTime @default(now())
  driftScore     Float    @default(0)
  diversityScore Float    @default(0)

  @@map("user_interest_vectors")
}

model SimilarUser {
  id            String   @id @default(cuid())
  userId        String
  similarUserId String
  similarity    Float
  updatedAt     DateTime @default(now())

  @@unique([userId, similarUserId])
  @@map("similar_users")
}

model Interaction {
  id          String   @id @default(cuid())
  userId      String
  contentId   String
  contentType String
  type        String
  subject     String?
  grade       String?
  weight      Int
  createdAt   DateTime @default(now())

  @@index([userId, createdAt])
  @@index([contentId])
  @@index([createdAt])
  @@map("interactions")
}

model AlgorithmMetrics {
  id               String   @id @default(cuid())
  userId           String
  algorithmVersion String
  sessionDuration  Int
  contentViews     Int
  contentLikes     Int
  returnRate       Float
  createdAt        DateTime @default(now())

  @@index([userId])
  @@index([algorithmVersion])
  @@index([createdAt])
  @@map("algorithm_metrics")
}

model StudyNote {
  id              String   @id @default(cuid())
  title           String
  content         String
  subject         String?
  ageGroup        String
  language        String   @default("en")
  sourceDocument  String?
  userId          String
  isPublic        Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([userId, createdAt])
  @@index([ageGroup])
  @@index([subject])
  @@map("study_notes")
}


model PendingGradeChange {
  id             String   @id @default(cuid())
  userId         String   @unique
  currentGrade   String
  newGrade       String
  requestedAt    DateTime @default(now())
  scheduledFor   DateTime
  
  @@index([scheduledFor])
  @@map("pending_grade_changes")
}

// ✨ YENİ: Modern Chat System Models

model ChatRoom {
  id                String          @id @default(cuid())
  communityId       String
  name              String
  description       String?

  // Room types
  isMainChat        Boolean         @default(false)  // Ana topluluk chati
  isPrivate         Boolean         @default(false)  // Özel alt kanal

  // Privacy settings
  isPublic          Boolean         @default(true)   // Topluluk dışı erişim
  maxMembers        Int             @default(300)    // Maksimum üye sayısı

  // Private channel settings
  inviteToken       String?         @unique          // Davet linki için token
  allowedUserId     String?                          // Sadece bu kullanıcı girebilir
  creatorId         String

  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  community         Community       @relation(fields: [communityId], references: [id], onDelete: Cascade)
  creator           User            @relation("ChatRoomCreator", fields: [creatorId], references: [id])
  members           ChatRoomMember[]
  messages          ChatMessage[]

  @@index([communityId, isMainChat])
  @@index([inviteToken])
  @@map("chat_rooms")
}

model ChatRoomMember {
  id          String      @id @default(cuid())
  userId      String
  chatRoomId  String
  role        String      @default("member")  // member, moderator
  joinedAt    DateTime    @default(now())
  lastReadAt  DateTime?                       // Son okunan mesaj zamanı

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatRoom    ChatRoom    @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)

  @@unique([userId, chatRoomId])
  @@map("chat_room_members")
}

model ChatMessage {
  id          String      @id @default(cuid())
  chatRoomId  String
  senderId    String
  content     String

  // Message types
  messageType String      @default("text")  // text, image, file, emoji
  attachmentUrl String?

  // Reactions
  reactions   String?                       // JSON: { "👍": ["userId1", "userId2"], "❤️": ["userId3"] }

  // Message status
  isEdited    Boolean     @default(false)
  isDeleted   Boolean     @default(false)
  deletedAt   DateTime?

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  chatRoom    ChatRoom    @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  sender      User        @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@index([chatRoomId, createdAt])
  @@index([senderId])
  @@map("chat_messages")
}

model ChatTypingIndicator {
  id          String      @id @default(cuid())
  chatRoomId  String
  userId      String
  updatedAt   DateTime    @default(now())

  @@unique([chatRoomId, userId])
  @@map("chat_typing_indicators")
}
